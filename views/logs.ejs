<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><i class="fas fa-terminal"></i> Web Activity Logs</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="exportLogs()">
                <i class="fas fa-download"></i> Exportieren
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="location.reload()">
                <i class="fas fa-sync-alt"></i> Aktualisieren
            </button>
        </div>
    </div>
</div>

<!-- Filter -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <label for="actionFilter" class="form-label">Aktion Filter</label>
                <select class="form-select" id="actionFilter" onchange="filterLogs()">
                    <option value="">Alle Aktionen</option>
                    <option value="LOGIN">Login</option>
                    <option value="LOGOUT">Logout</option>
                    <option value="VIEW_MESSAGES">Nachrichten anzeigen</option>
                    <option value="VIEW_TICKETS">Tickets anzeigen</option>
                    <option value="CLOSE_TICKET">Ticket schließen</option>
                    <option value="CREATE_WEB_USER">Web-Benutzer erstellen</option>
                    <option value="VIEW_USERS">Benutzer verwalten</option>
                    <option value="VERIFY_USER">Benutzer verifizieren</option>
                    <option value="RESET_PASSWORD">Passwort zurücksetzen</option>
                    <option value="REGENERATE_UNIQUE_PASSWORD">Unique Password regenerieren</option>
                    <option value="DELETE_WEB_USER">Web-Benutzer löschen</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="userFilter" class="form-label">Benutzer Filter</label>
                <select class="form-select" id="userFilter" onchange="filterLogs()">
                    <option value="">Alle Benutzer</option>
                    <% 
                    const uniqueUsers = [...new Set(logs.map(log => log.username).filter(u => u))];
                    uniqueUsers.forEach(user => { 
                    %>
                        <option value="<%= user %>"><%= user %></option>
                    <% }); %>
                </select>
            </div>
            <div class="col-md-4">
                <label for="logSearch" class="form-label">Details durchsuchen</label>
                <input type="text" class="form-control" id="logSearch" placeholder="In Details suchen..." onkeyup="filterLogs()">
            </div>
        </div>
    </div>
</div>

<!-- Logs Liste -->
<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-list-ul"></i> Activity Logs
            <span class="badge bg-secondary ms-2" id="logCount"><%= logs.length %></span>
        </h5>
    </div>
    <div class="card-body">
        <% if (logs.length === 0) { %>
        <div class="text-center py-4">
            <i class="fas fa-list fa-3x text-muted mb-3"></i>
            <p class="text-muted">Keine Logs vorhanden.</p>
        </div>
        <% } else { %>
        
        <div class="table-responsive">
            <table class="table table-dark table-hover table-sm" id="logsTable">
                <thead>
                    <tr>
                        <th width="20%">Zeitstempel</th>
                        <th width="15%">Benutzer</th>
                        <th width="20%">Aktion</th>
                        <th width="45%">Details</th>
                    </tr>
                </thead>
                <tbody>
                    <% logs.forEach(function(log) { %>
                    <tr class="log-row" 
                        data-action="<%= log.action %>" 
                        data-user="<%= log.username || 'Unbekannt' %>" 
                        data-search="<%= (log.details || '').toLowerCase() %>">
                        <td>
                            <div class="timestamp-container">
                                <div class="timestamp-date">
                                    <%= new Date(log.timestamp).toLocaleDateString('de-DE') %>
                                </div>
                                <div class="timestamp-time">
                                    <%= new Date(log.timestamp).toLocaleTimeString('de-DE') %>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="user-info">
                                <% if (log.username) { %>
                                    <div class="user-avatar-small">
                                        <i class="fas fa-user-astronaut"></i>
                                    </div>
                                    <div class="user-details">
                                        <div class="username"><%= log.username %></div>
                                        <div class="user-id">ID: <%= log.user_id %></div>
                                    </div>
                                <% } else { %>
                                    <div class="user-avatar-small unknown">
                                        <i class="fas fa-user-times"></i>
                                    </div>
                                    <div class="user-details">
                                        <div class="username text-muted">Unbekannt</div>
                                        <div class="user-id">ID: <%= log.user_id || 'N/A' %></div>
                                    </div>
                                <% } %>
                            </div>
                        </td>
                        <td>
                            <span class="action-badge bg-<%= getActionBadgeColor(log.action) %>">
                                <i class="fas fa-<%= getActionIcon(log.action) %>"></i>
                                <%= log.action %>
                            </span>
                        </td>
                        <td>
                            <div class="log-details">
                                <%= log.details || '-' %>
                            </div>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        <% if (totalPages > 1) { %>
        <nav aria-label="Log pagination" class="mt-4">
            <ul class="pagination justify-content-center pagination-sm">
                <% if (hasPrev) { %>
                <li class="page-item">
                    <a class="page-link" href="/logs?page=<%= currentPage - 1 %>">
                        <i class="fas fa-chevron-left"></i> Zurück
                    </a>
                </li>
                <% } %>
                
                <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
                <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                    <a class="page-link" href="/logs?page=<%= i %>"><%= i %></a>
                </li>
                <% } %>
                
                <% if (hasNext) { %>
                <li class="page-item">
                    <a class="page-link" href="/logs?page=<%= currentPage + 1 %>">
                        Weiter <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
                <% } %>
            </ul>
        </nav>
        <% } %>
        
        <% } %>
    </div>
</div>

<%
function getActionBadgeColor(action) {
    const colorMap = {
        'LOGIN': 'success',
        'LOGOUT': 'secondary',
        'VIEW_MESSAGES': 'info',
        'VIEW_TICKETS': 'warning',
        'CLOSE_TICKET': 'danger',
        'CREATE_WEB_USER': 'primary',
        'VIEW_USERS': 'info',
        'VERIFY_USER': 'success',
        'RESET_PASSWORD': 'warning',
        'REGENERATE_UNIQUE_PASSWORD': 'warning',
        'DELETE_WEB_USER': 'danger'
    };
    return colorMap[action] || 'secondary';
}

function getActionIcon(action) {
    const iconMap = {
        'LOGIN': 'sign-in-alt',
        'LOGOUT': 'sign-out-alt',
        'VIEW_MESSAGES': 'comments',
        'VIEW_TICKETS': 'ticket-alt',
        'CLOSE_TICKET': 'lock',
        'CREATE_WEB_USER': 'user-plus',
        'VIEW_USERS': 'users',
        'VERIFY_USER': 'check-circle',
        'RESET_PASSWORD': 'key',
        'REGENERATE_UNIQUE_PASSWORD': 'sync-alt',
        'DELETE_WEB_USER': 'trash'
    };
    return iconMap[action] || 'cog';
}
%>

<style>
.timestamp-container {
    text-align: center;
}

.timestamp-date {
    font-size: 0.8rem;
    color: var(--text-secondary);
    font-weight: 600;
}

.timestamp-time {
    font-size: 0.75rem;
    color: var(--text-muted);
    font-family: 'Orbitron', monospace;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.user-avatar-small {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: var(--primary-pink);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.9rem;
    box-shadow: 0 0 10px var(--glow-pink);
}

.user-avatar-small.unknown {
    background: var(--text-muted);
    box-shadow: none;
}

.user-details {
    flex: 1;
    min-width: 0;
}

.username {
    font-weight: 600;
    font-size: 0.9rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.user-id {
    font-size: 0.7rem;
    color: var(--text-muted);
    font-family: 'Orbitron', monospace;
}

.action-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.4rem 0.8rem;
    border-radius: 8px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-family: 'Orbitron', monospace;
    white-space: nowrap;
}

.log-details {
    max-width: 400px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 0.85rem;
    line-height: 1.4;
}

.log-details:hover {
    white-space: normal;
    overflow: visible;
    word-wrap: break-word;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0.5rem;
    border-radius: 4px;
    position: relative;
    z-index: 10;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    max-width: none;
}

.log-row {
    transition: all 0.2s ease;
}

.log-row:hover {
    background-color: rgba(255, 0, 102, 0.075);
    transform: translateX(2px);
}

.table-hover tbody tr:hover {
    background-color: rgba(255, 0, 102, 0.075);
}

/* Action Badge Colors */
.bg-success {
    background: linear-gradient(45deg, #00ff88, #00cc6a) !important;
}

.bg-danger {
    background: linear-gradient(45deg, var(--primary-pink), var(--secondary-pink)) !important;
}

.bg-warning {
    background: linear-gradient(45deg, #ffaa00, #ff8800) !important;
}

.bg-info {
    background: linear-gradient(45deg, #00aaff, #0088cc) !important;
}

.bg-primary {
    background: linear-gradient(45deg, var(--primary-pink), var(--accent-pink)) !important;
}

.bg-secondary {
    background: linear-gradient(45deg, var(--text-muted), #666666) !important;
}

/* Filter Animation */
.log-row {
    opacity: 1;
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.log-row[style*="display: none"] {
    opacity: 0;
    transform: translateX(-10px);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .timestamp-container {
        text-align: left;
    }
    
    .user-info {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }
    
    .user-avatar-small {
        width: 24px;
        height: 24px;
        font-size: 0.7rem;
    }
    
    .action-badge {
        font-size: 0.65rem;
        padding: 0.3rem 0.6rem;
    }
    
    .log-details {
        max-width: 200px;
        font-size: 0.8rem;
    }
    
    th, td {
        padding: 0.5rem 0.25rem;
    }
}

/* Loading State */
.loading-row {
    background: linear-gradient(90deg, transparent, rgba(255, 0, 102, 0.1), transparent);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
}
</style>

<script>
// Filter Funktionen
function filterLogs() {
    const actionFilter = document.getElementById('actionFilter').value;
    const userFilter = document.getElementById('userFilter').value;
    const searchTerm = document.getElementById('logSearch').value.toLowerCase();
    const rows = document.querySelectorAll('.log-row');
    let visibleCount = 0;

    rows.forEach(row => {
        const action = row.getAttribute('data-action');
        const user = row.getAttribute('data-user');
        const searchData = row.getAttribute('data-search');
        
        const actionMatch = !actionFilter || action === actionFilter;
        const userMatch = !userFilter || user === userFilter;
        const searchMatch = !searchTerm || searchData.includes(searchTerm);
        
        if (actionMatch && userMatch && searchMatch) {
            row.style.display = '';
            visibleCount++;
        } else {
            row.style.display = 'none';
        }
    });
    
    document.getElementById('logCount').textContent = visibleCount;
    
    // Update pagination info
    const totalVisible = visibleCount;
    const pagination = document.querySelector('.pagination');
    if (pagination && totalVisible === 0) {
        pagination.style.display = 'none';
    } else if (pagination) {
        pagination.style.display = 'flex';
    }
}

// Export Logs
function exportLogs() {
    const rows = document.querySelectorAll('.log-row');
    let csv = 'Zeitstempel,Benutzer,Aktion,Details\n';
    
    rows.forEach(row => {
        if (row.style.display !== 'none') {
            const cells = row.querySelectorAll('td');
            const timestamp = cells[0].textContent.trim().replace(/\n/g, ' ');
            const user = cells[1].textContent.trim().replace(/\n/g, ' ');
            const action = cells[2].textContent.trim();
            const details = cells[3].textContent.trim().replace(/"/g, '""');
            
            csv += `"${timestamp}","${user}","${action}","${details}"\n`;
        }
    });
    
    // Download CSV
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `14th_squad_web_logs_${new Date().toISOString().slice(0,10)}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// Real-time Filter
let filterTimeout;
document.getElementById('logSearch').addEventListener('input', function() {
    clearTimeout(filterTimeout);
    filterTimeout = setTimeout(filterLogs, 300);
});

// Auto-refresh alle 60 Sekunden
setTimeout(() => {
    if (!document.hidden) {
        location.reload();
    }
}, 60000);

// Page Visibility API - pausiere refresh wenn Tab nicht aktiv
document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
        console.log('Tab ist versteckt - Auto-refresh pausiert');
    } else {
        console.log('Tab ist aktiv - Auto-refresh aktiv');
    }
});

// Initialize filters
document.addEventListener('DOMContentLoaded', function() {
    // Load filter states from localStorage
    const savedActionFilter = localStorage.getItem('logs_action_filter');
    const savedUserFilter = localStorage.getItem('logs_user_filter');
    const savedSearchTerm = localStorage.getItem('logs_search_term');
    
    if (savedActionFilter) {
        document.getElementById('actionFilter').value = savedActionFilter;
    }
    if (savedUserFilter) {
        document.getElementById('userFilter').value = savedUserFilter;
    }
    if (savedSearchTerm) {
        document.getElementById('logSearch').value = savedSearchTerm;
    }
    
    // Apply filters if any were saved
    if (savedActionFilter || savedUserFilter || savedSearchTerm) {
        filterLogs();
    }
    
    // Save filter states on change
    document.getElementById('actionFilter').addEventListener('change', function() {
        localStorage.setItem('logs_action_filter', this.value);
    });
    
    document.getElementById('userFilter').addEventListener('change', function() {
        localStorage.setItem('logs_user_filter', this.value);
    });
    
    document.getElementById('logSearch').addEventListener('input', function() {
        localStorage.setItem('logs_search_term', this.value);
    });
});

// Keyboard Shortcuts
document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + F für Suche
    if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
        e.preventDefault();
        document.getElementById('logSearch').focus();
    }
    
    // Escape um Filter zu löschen
    if (e.key === 'Escape') {
        document.getElementById('actionFilter').value = '';
        document.getElementById('userFilter').value = '';
        document.getElementById('logSearch').value = '';
        localStorage.removeItem('logs_action_filter');
        localStorage.removeItem('logs_user_filter');
        localStorage.removeItem('logs_search_term');
        filterLogs();
    }
    
    // Ctrl/Cmd + E für Export
    if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
        e.preventDefault();
        exportLogs();
    }
});
</script>