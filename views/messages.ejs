<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><i class="fas fa-comments"></i> Nachrichten Log</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="exportMessages()">
                <i class="fas fa-download"></i> Exportieren
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="location.reload()">
                <i class="fas fa-sync-alt"></i> Aktualisieren
            </button>
        </div>
    </div>
</div>

<!-- Suchformular -->
<div class="discord-search-container">
    <div class="discord-search-form">
        <form method="GET" action="/messages" class="search-form-grid">
            <div class="search-input-wrapper">
                <label class="discord-label">Nachrichten durchsuchen</label>
                <input type="text" class="discord-input" id="search" name="search" 
                       value="<%= search %>" placeholder="Nach Nachricht, Benutzer oder Channel suchen...">
            </div>
            <div class="channel-filter-wrapper">
                <label class="discord-label">Channel Filter</label>
                <select class="discord-select" name="channel" id="channel">
                    <option value="">Alle Channels</option>
                    <% 
                    const channels = [...new Set(messages.map(m => m.channel_name))];
                    channels.forEach(channel => { 
                    %>
                        <option value="<%= channel %>" <%= channel === (typeof channel !== 'undefined' ? channel : '') ? 'selected' : '' %>><%= channel %></option>
                    <% }); %>
                </select>
            </div>
            <div class="search-buttons-wrapper">
                <button type="submit" class="discord-button primary">
                    <i class="fas fa-search"></i> Suchen
                </button>
                <% if (search) { %>
                <a href="/messages" class="discord-button secondary">
                    <i class="fas fa-times"></i> Reset
                </a>
                <% } %>
            </div>
        </form>
    </div>
</div>

<!-- Suchergebnisse Info -->
<% if (search) { %>
<div class="discord-search-results">
    <i class="fas fa-search"></i> 
    Suchergebnisse für: <strong>"<%= search %>"</strong>
    <span class="result-count"><%= messages.length %></span>
</div>
<% } %>

<!-- Discord-Style Nachrichten Container -->
<div class="discord-chat-wrapper">
    <div class="discord-chat-header">
        <div class="channel-name">
            <span class="channel-icon">#</span>
            nachrichten-log
        </div>
        <div class="chat-controls">
            <div class="view-toggle">
                <input type="radio" class="view-radio" name="msgView" id="cozy" autocomplete="off" checked>
                <label class="view-label" for="cozy">
                    <i class="fas fa-align-left"></i> Gemütlich
                </label>
                
                <input type="radio" class="view-radio" name="msgView" id="compact" autocomplete="off">
                <label class="view-label" for="compact">
                    <i class="fas fa-bars"></i> Kompakt
                </label>
            </div>
            <div class="message-count">
                <span id="visibleMessages"><%= messages.length %></span> Nachrichten
            </div>
        </div>
    </div>
    
    <div class="discord-messages-scroller" id="messagesContainer">
        <% if (messages.length === 0) { %>
        <div class="discord-empty-state">
            <div class="empty-icon">
                <i class="fas fa-inbox"></i>
            </div>
            <div class="empty-title">Keine Nachrichten gefunden</div>
            <div class="empty-description">
                Versuche deine Suchbegriffe zu ändern oder einen anderen Channel auszuwählen.
            </div>
        </div>
        <% } else { %>
        
        <div class="discord-messages-list">
            <% 
            let lastAuthor = null;
            let lastDate = null;
            let lastTimestamp = null;
            
            messages.forEach(function(message, index) { 
                const messageDate = new Date(message.timestamp).toDateString();
                const messageTime = new Date(message.timestamp).getTime();
                const showDateDivider = index === 0 || lastDate !== messageDate;
                
                // Zeige Avatar wenn: anderer Autor, anderes Datum, oder mehr als 7 Minuten zwischen Nachrichten
                const showAvatar = lastAuthor !== message.username || 
                                 showDateDivider || 
                                 (lastTimestamp && (messageTime - lastTimestamp) > 7 * 60 * 1000);
                
                lastAuthor = message.username;
                lastDate = messageDate;
                lastTimestamp = messageTime;
            %>
            
            <!-- Date Divider -->
            <% if (showDateDivider) { %>
            <div class="discord-date-divider">
                <div class="divider-line"></div>
                <div class="divider-content">
                    <span class="divider-text">
                        <%= new Date(message.timestamp).toLocaleDateString('de-DE', { 
                            weekday: 'long', 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                        }) %>
                    </span>
                </div>
                <div class="divider-line"></div>
            </div>
            <% } %>
            
            <div class="discord-message <%= showAvatar ? 'has-avatar' : 'continuation' %> <%= message.deleted ? 'message-deleted' : '' %> <%= message.edited ? 'message-edited' : '' %>" 
                 data-message-id="<%= message.message_id %>" 
                 data-user-id="<%= message.user_id %>" 
                 data-timestamp="<%= message.timestamp %>">
                
                <% if (showAvatar) { %>
                <!-- Avatar Column -->
                <div class="message-avatar-wrapper">
                    <% if (message.user_id === 'SYSTEM') { %>
                        <div class="discord-avatar system-avatar">
                            <i class="fas fa-cog"></i>
                        </div>
                    <% } else { %>
                        <img src="https://cdn.discordapp.com/embed/avatars/<%= parseInt(message.user_id.slice(-1)) % 5 %>.png" 
                             alt="<%= message.username %>" 
                             class="discord-avatar user-avatar">
                    <% } %>
                </div>
                
                <!-- Message Content -->
                <div class="message-content-wrapper">
                    <div class="message-header-line">
                        <span class="message-author <%= message.user_id === 'SYSTEM' ? 'system-author' : '' %>">
                            <%= message.username %>
                        </span>
                        
                        <% if (message.user_id === 'SYSTEM') { %>
                            <span class="bot-tag">BOT</span>
                        <% } %>
                        
                        <span class="message-timestamp-full">
                            <%= new Date(message.timestamp).toLocaleString('de-DE', { 
                                hour: '2-digit', 
                                minute: '2-digit',
                                day: '2-digit',
                                month: '2-digit',
                                year: 'numeric'
                            }) %>
                        </span>
                        
                        <% if (message.edited && !message.deleted) { %>
                            <span class="edited-tag">
                                <i class="fas fa-pencil-alt"></i>
                                bearbeitet
                            </span>
                        <% } %>
                        
                        <% if (message.deleted) { %>
                            <span class="deleted-tag">
                                <i class="fas fa-trash"></i>
                                gelöscht
                            </span>
                        <% } %>
                        
                        <span class="channel-badge">
                            <i class="fas fa-hashtag"></i><%= message.channel_name %>
                        </span>
                    </div>
                    
                    <div class="message-content-text">
                        <% if (message.deleted) { %>
                            <span class="deleted-message-content">
                                <i class="fas fa-trash"></i> Diese Nachricht wurde gelöscht
                            </span>
                        <% } else { %>
                            <% if (search && message.content) { %>
                                <%- message.content.replace(new RegExp(`(${search.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi'), '<mark class="discord-highlight">$1</mark>') %>
                            <% } else { %>
                                <%= message.content || '[Nachricht ohne Inhalt]' %>
                            <% } %>
                        <% } %>
                    </div>
                    
                    <!-- Attachments -->
                    <% if (message.attachments && message.attachments.trim() !== '') { %>
                    <div class="message-attachments">
                        <% 
                        const attachments = message.attachments.split(', ').filter(att => att.trim() !== '');
                        attachments.forEach(function(attachment) { 
                        %>
                        <div class="discord-attachment">
                            <div class="attachment-inner">
                                <div class="attachment-icon">
                                    <i class="fas fa-paperclip"></i>
                                </div>
                                <div class="attachment-details">
                                    <a href="<%= attachment %>" target="_blank" class="attachment-name">
                                        <%= attachment.split('/').pop().substring(0, 50) %><%= attachment.split('/').pop().length > 50 ? '...' : '' %>
                                    </a>
                                    <div class="attachment-size">Anhang</div>
                                </div>
                                <a href="<%= attachment %>" target="_blank" class="attachment-download">
                                    <i class="fas fa-download"></i>
                                </a>
                            </div>
                        </div>
                        <% }); %>
                    </div>
                    <% } %>
                </div>
                <% } else { %>
                <!-- Continuation Message (no avatar) -->
                <div class="message-avatar-wrapper continuation-spacer">
                    <div class="continuation-timestamp">
                        <%= new Date(message.timestamp).toLocaleTimeString('de-DE', { 
                            hour: '2-digit', 
                            minute: '2-digit'
                        }) %>
                    </div>
                </div>
                
                <div class="message-content-wrapper">
                    <div class="message-content-text">
                        <% if (message.deleted) { %>
                            <span class="deleted-message-content">
                                <i class="fas fa-trash"></i> Diese Nachricht wurde gelöscht
                            </span>
                        <% } else { %>
                            <% if (search && message.content) { %>
                                <%- message.content.replace(new RegExp(`(${search.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi'), '<mark class="discord-highlight">$1</mark>') %>
                            <% } else { %>
                                <%= message.content || '[Nachricht ohne Inhalt]' %>
                            <% } %>
                        <% } %>
                        
                        <% if (message.edited && !message.deleted) { %>
                            <span class="edited-indicator">
                                <i class="fas fa-pencil-alt"></i>
                            </span>
                        <% } %>
                    </div>
                    
                    <!-- Attachments for continuation -->
                    <% if (message.attachments && message.attachments.trim() !== '') { %>
                    <div class="message-attachments">
                        <% 
                        const attachments = message.attachments.split(', ').filter(att => att.trim() !== '');
                        attachments.forEach(function(attachment) { 
                        %>
                        <div class="discord-attachment">
                            <div class="attachment-inner">
                                <div class="attachment-icon">
                                    <i class="fas fa-paperclip"></i>
                                </div>
                                <div class="attachment-details">
                                    <a href="<%= attachment %>" target="_blank" class="attachment-name">
                                        <%= attachment.split('/').pop() %>
                                    </a>
                                    <div class="attachment-size">Anhang</div>
                                </div>
                                <a href="<%= attachment %>" target="_blank" class="attachment-download">
                                    <i class="fas fa-download"></i>
                                </a>
                            </div>
                        </div>
                        <% }); %>
                    </div>
                    <% } %>
                </div>
                <% } %>
                
                <!-- Message Actions (on hover) -->
                <div class="discord-message-actions">
                    <div class="message-actions-inner">
                        <button class="action-button" title="Details anzeigen" onclick="showMessageDetails('<%= message.id %>')">
                            <i class="fas fa-info-circle"></i>
                        </button>
                        <button class="action-button" title="In Discord anzeigen" onclick="jumpToMessage('<%= message.message_id %>', '<%= message.channel_id %>')">
                            <i class="fab fa-discord"></i>
                        </button>
                        <button class="action-button" title="Nachricht kopieren" onclick="copyMessage('<%= message.content %>')">
                            <i class="fas fa-copy"></i>
                        </button>
                        <button class="action-button" title="Benutzer-ID kopieren" onclick="copyToClipboard('<%= message.user_id %>')">
                            <i class="fas fa-user"></i>
                        </button>
                    </div>
                </div>
            </div>
            <% }); %>
        </div>
        
        <!-- Pagination -->
        <% if (totalPages > 1) { %>
        <div class="discord-pagination">
            <div class="pagination-inner">
                <% if (hasPrev) { %>
                <a class="pagination-button" href="/messages?page=<%= currentPage - 1 %><%= search ? '&search=' + encodeURIComponent(search) : '' %><%= channel ? '&channel=' + encodeURIComponent(channel) : '' %>">
                    <i class="fas fa-chevron-left"></i> Zurück
                </a>
                <% } %>
                
                <div class="pagination-info">
                    Seite <%= currentPage %> von <%= totalPages %>
                </div>
                
                <% if (hasNext) { %>
                <a class="pagination-button" href="/messages?page=<%= currentPage + 1 %><%= search ? '&search=' + encodeURIComponent(search) : '' %><%= channel ? '&channel=' + encodeURIComponent(channel) : '' %>">
                    Weiter <i class="fas fa-chevron-right"></i>
                </a>
                <% } %>
            </div>
        </div>
        <% } %>
        
        <% } %>
    </div>
</div>

<!-- Message Details Modal -->
<div class="modal fade" id="messageDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content discord-modal">
            <div class="modal-header discord-modal-header">
                <h5 class="modal-title">Nachrichten Details</h5>
                <button type="button" class="btn-close discord-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body discord-modal-body">
                <div id="messageDetailsContent">
                    <!-- Details werden hier geladen -->
                </div>
            </div>
            <div class="modal-footer discord-modal-footer">
                <button type="button" class="discord-button secondary" data-bs-dismiss="modal">Schließen</button>
            </div>
        </div>
    </div>
</div>

<%
function generateAvatarHash(userId) {
    // Generiere einen konsistenten Hash basierend auf der User ID
    let hash = 0;
    for (let i = 0; i < userId.length; i++) {
        const char = userId.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(16).padStart(8, '0').substring(0, 8);
}
%>

<style>
/* Discord-authentische Variablen */
:root {
    --primary-bg: #0a0a0a;
    --secondary-bg: #111111;
    --accent-bg: #1a1a1a;
    --border-color: #333333;
    
    --primary-pink: #ff0066;
    --secondary-pink: #cc0052;
    --accent-pink: #ff3385;
    --glow-pink: rgba(255, 0, 102, 0.3);
    
    --text-primary: #ffffff;
    --text-secondary: #cccccc;
    --text-muted: #888888;
}

/* Search Container */
.discord-search-container {
    background: var(--secondary-bg);
    border-radius: 8px 8px 0 0;
    padding: 16px 20px;
    border-bottom: 1px solid var(--border-color);
}

.search-form-grid {
    display: grid;
    grid-template-columns: 1fr auto auto;
    gap: 16px;
    align-items: end;
}

.discord-label {
    display: block;
    color: var(--text-secondary);
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 8px;
    letter-spacing: 0.5px;
}

.discord-input, .discord-select {
    background: var(--accent-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-primary);
    padding: 10px 12px;
    font-size: 16px;
    width: 100%;
    transition: border-color 0.15s ease;
}

.discord-input:focus, .discord-select:focus {
    outline: none;
    border-color: var(--primary-pink);
    box-shadow: 0 0 0 1px var(--primary-pink);
}

.discord-input::placeholder {
    color: var(--text-muted);
}

.search-buttons-wrapper {
    display: flex;
    gap: 8px;
}

.discord-button {
    border: none;
    border-radius: 4px;
    padding: 10px 16px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 6px;
}

.discord-button.primary {
    background: var(--primary-pink);
    color: white;
}

.discord-button.primary:hover {
    background: var(--secondary-pink);
    color: white;
    box-shadow: 0 0 15px var(--glow-pink);
}

.discord-button.secondary {
    background: var(--border-color);
    color: var(--text-secondary);
}

.discord-button.secondary:hover {
    background: var(--accent-bg);
    color: var(--text-primary);
}

/* Search Results */
.discord-search-results {
    background: var(--secondary-bg);
    color: var(--text-primary);
    padding: 12px 20px;
    border-bottom: 1px solid var(--border-color);
    font-size: 14px;
}

.result-count {
    background: var(--primary-pink);
    color: white;
    padding: 2px 6px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
    margin-left: 8px;
}

/* Chat Wrapper */
.discord-chat-wrapper {
    background: var(--primary-bg);
    border-radius: 0 0 8px 8px;
    overflow: hidden;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.24);
}

.discord-chat-header {
    background: var(--secondary-bg);
    padding: 12px 20px;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.channel-name {
    color: var(--text-primary);
    font-size: 16px;
    font-weight: 600;
    display: flex;
    align-items: center;
}

.channel-icon {
    color: var(--text-muted);
    margin-right: 6px;
    font-size: 20px;
}

.chat-controls {
    display: flex;
    align-items: center;
    gap: 16px;
}

.view-toggle {
    display: flex;
    background: var(--accent-bg);
    border-radius: 4px;
    overflow: hidden;
}

.view-radio {
    display: none;
}

.view-label {
    padding: 6px 12px;
    background: transparent;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    border: none;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    gap: 4px;
}

.view-radio:checked + .view-label {
    background: var(--primary-pink);
    color: white;
}

.view-label:hover {
    background: rgba(255, 0, 102, 0.1);
    color: var(--primary-pink);
}

.view-radio:checked + .view-label:hover {
    background: var(--secondary-pink);
}

.message-count {
    color: var(--text-muted);
    font-size: 14px;
}

/* Messages Scroller */
.discord-messages-scroller {
    background: var(--primary-bg);
    min-height: 400px;
    max-height: 70vh;
    overflow-y: auto;
    padding: 0;
}

.discord-messages-scroller::-webkit-scrollbar {
    width: 14px;
}

.discord-messages-scroller::-webkit-scrollbar-thumb {
    background: var(--border-color);
    border: 3px solid var(--primary-bg);
    border-radius: 8px;
}

.discord-messages-scroller::-webkit-scrollbar-track {
    background: transparent;
}

.discord-messages-scroller::-webkit-scrollbar-thumb:hover {
    background: var(--accent-bg);
}

/* Empty State */
.discord-empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 80px 40px;
    text-align: center;
}

.empty-icon {
    font-size: 48px;
    color: var(--text-muted);
    margin-bottom: 16px;
    opacity: 0.5;
}

.empty-title {
    color: var(--text-secondary);
    font-size: 20px;
    font-weight: 600;
    margin-bottom: 8px;
}

.empty-description {
    color: var(--text-muted);
    font-size: 16px;
    max-width: 400px;
    line-height: 1.4;
}

/* Date Divider - minimaler Abstand */
.discord-date-divider {
    display: flex;
    align-items: center;
    margin: 24px 16px 8px 16px;
    position: relative;
}

.divider-line {
    height: 1px;
    background: var(--border-color);
    flex: 1;
}

.divider-content {
    margin: 0 16px;
    position: relative;
}

.divider-text {
    background: var(--primary-bg);
    color: var(--text-muted);
    padding: 2px 4px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    line-height: 16px;
}

/* Messages - Echtes Discord Spacing */
.discord-message {
    position: relative;
    padding: 0.125rem 48px 0.125rem 72px; /* Links genug Platz für Avatar */
    margin-top: 0;
    word-wrap: break-word;
    user-select: text;
    transition: background-color 0.1s ease;
}

.discord-message:hover {
    background: rgba(255, 0, 102, 0.04);
}

/* Avatar Message - nur minimal mehr Abstand */
.discord-message.has-avatar {
    margin-top: 1.0625rem; /* 17px wie bei Discord */
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
}

/* Continuation Messages - fast kein Abstand */
.discord-message.continuation {
    margin-top: 0;
    padding-top: 0.125rem;
    padding-bottom: 0.125rem;
}

/* Avatar - linksbündig */
.message-avatar-wrapper {
    position: absolute;
    left: 16px;
    top: calc(0.125rem + 2px); /* Leicht nach unten versetzt */
    width: 40px;
    height: 40px;
}

.discord-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid var(--primary-pink);
    box-shadow: 0 0 8px var(--glow-pink);
}

.system-avatar {
    background: var(--primary-pink);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 18px;
}

.user-avatar {
    transition: opacity 0.1s ease;
}

.user-avatar:hover {
    opacity: 0.8;
}

/* Continuation Timestamp - wie bei Discord */
.continuation-spacer {
    position: absolute;
    left: 0;
    top: 0;
    width: 56px;
    height: 22px;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding-right: 16px;
}

.continuation-timestamp {
    font-size: 11px;
    line-height: 22px;
    color: var(--text-muted);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.1s ease;
    text-align: right;
    width: 100%;
}

.discord-message:hover .continuation-timestamp {
    opacity: 1;
}

/* Message Content */
.message-content-wrapper {
    position: relative;
    min-width: 0;
}

/* Message Header - eine Zeile, kompakt */
.message-header-line {
    display: flex;
    align-items: baseline;
    line-height: 1.375rem; /* 22px */
    min-height: 1.375rem;
    margin-bottom: 0;
    gap: 0.5rem;
}

.message-author {
    color: var(--text-primary);
    font-size: 1rem;
    font-weight: 500;
    line-height: 1.375rem;
    cursor: pointer;
    flex-shrink: 0;
}

.message-author:hover {
    text-decoration: underline;
}

.system-author {
    color: var(--primary-pink);
}

.bot-tag {
    background: var(--primary-pink);
    color: white;
    font-size: 0.625rem;
    font-weight: 500;
    padding: 0.0625rem 0.25rem;
    border-radius: 0.1875rem;
    text-transform: uppercase;
    line-height: 0.9375rem;
    margin-top: 0.25rem;
    vertical-align: top;
}

.message-timestamp-full {
    color: var(--text-muted);
    font-size: 0.75rem;
    font-weight: 500;
    line-height: 1.375rem;
    cursor: default;
    margin-left: 0.5rem;
}

.message-timestamp-full:hover {
    color: var(--text-primary);
}

.edited-tag, .deleted-tag {
    color: var(--text-muted);
    font-size: 0.625rem;
    font-weight: 500;
    padding: 0.125rem 0.25rem;
    border-radius: 0.1875rem;
    display: inline-flex;
    align-items: center;
    gap: 0.125rem;
}

.edited-tag {
    background: rgba(255, 170, 0, 0.1);
    color: #ffaa00;
}

.deleted-tag {
    background: rgba(255, 0, 102, 0.1);
    color: var(--primary-pink);
}

.channel-badge {
    background: rgba(255, 0, 102, 0.1);
    color: var(--text-muted);
    font-size: 0.6875rem;
    font-weight: 500;
    padding: 0.125rem 0.375rem;
    border-radius: 0.5rem;
    margin-left: auto;
    display: inline-flex;
    align-items: center;
    gap: 0.125rem;
}

/* Message Text - direkt unter Header, kein Abstand */
.message-content-text {
    font-size: 1rem;
    line-height: 1.375rem; /* 22px */
    color: var(--text-primary);
    word-wrap: break-word;
    white-space: pre-wrap;
    user-select: text;
    margin-top: 0;
    position: relative;
}

/* Message States */
.message-deleted {
    opacity: 0.6;
}

.message-deleted .message-content-text {
    color: var(--text-muted);
    font-style: italic;
}

.message-edited {
    position: relative;
}

.deleted-message-content {
    color: var(--text-muted);
    font-style: italic;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
}

.edited-indicator {
    color: var(--text-muted);
    font-size: 0.625rem;
    margin-left: 0.25rem;
    opacity: 0.7;
}

/* Search Highlight */
.discord-highlight {
    background: var(--glow-pink);
    border-radius: 0.125rem;
    padding: 0 0.125rem;
    color: var(--text-primary);
    font-weight: 600;
}

/* Attachments - weniger Abstand */
.message-attachments {
    margin-top: 0.5rem;
    max-width: 27rem; /* 432px */
}

.discord-attachment {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 0.75rem;
    margin-bottom: 0.25rem;
    transition: all 0.2s ease;
}

.discord-attachment:hover {
    border-color: var(--primary-pink);
    box-shadow: 0 0 8px var(--glow-pink);
}

.attachment-inner {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.attachment-icon {
    width: 2.5rem;
    height: 2.5rem;
    background: var(--accent-bg);
    border-radius: 0.375rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary-pink);
    font-size: 1.125rem;
    flex-shrink: 0;
}

.attachment-details {
    flex: 1;
    min-width: 0;
}

.attachment-name {
    color: var(--primary-pink);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.attachment-name:hover {
    text-decoration: underline;
    color: var(--accent-pink);
}

.attachment-size {
    color: var(--text-muted);
    font-size: 0.75rem;
    margin-top: 0.125rem;
}

.attachment-download {
    width: 2rem;
    height: 2rem;
    background: var(--accent-bg);
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    text-decoration: none;
    transition: all 0.2s ease;
    flex-shrink: 0;
}

.attachment-download:hover {
    background: var(--primary-pink);
    color: white;
    box-shadow: 0 0 8px var(--glow-pink);
}

/* Message Actions */
.discord-message-actions {
    position: absolute;
    top: -1rem;
    right: 1rem;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.1s ease;
    z-index: 10;
}

.discord-message:hover .discord-message-actions {
    opacity: 1;
    pointer-events: auto;
}

.message-actions-inner {
    background: var(--secondary-bg);
    border: 1px solid var(--primary-pink);
    border-radius: 0.5rem;
    padding: 0.25rem;
    display: flex;
    gap: 0.125rem;
    box-shadow: 0 0.5rem 1rem var(--glow-pink);
}

.action-button {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    padding: 0.375rem 0.5rem;
    border-radius: 0.25rem;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
}

.action-button:hover {
    background: var(--primary-pink);
    color: white;
    transform: scale(1.05);
}

/* Compact View - noch weniger Spacing */
.compact .discord-message {
    padding: 0.125rem 48px 0.125rem 72px;
    margin-top: 0;
}

.compact .discord-message.has-avatar {
    margin-top: 0.125rem;
}

.compact .discord-message.continuation {
    margin-top: 0;
}

.compact .message-header-line {
    display: none;
}

.compact .message-content-text {
    font-size: 0.875rem;
    line-height: 1.25rem;
}

.compact .discord-avatar {
    width: 1rem;
    height: 1rem;
    margin-top: 0.125rem;
    opacity: 0;
}

.compact .system-avatar {
    font-size: 10px;
}

.compact .message-avatar-wrapper {
    width: 1rem;
    height: 1rem;
    left: 20px;
    top: 0.125rem;
}

.compact .discord-message:hover .discord-avatar {
    opacity: 1;
}

/* Pagination */
.discord-pagination {
    background: var(--secondary-bg);
    padding: 16px 20px;
    border-top: 1px solid var(--border-color);
}

.pagination-inner {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 600px;
    margin: 0 auto;
}

.pagination-button {
    background: var(--accent-bg);
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    padding: 8px 16px;
    border-radius: 4px;
    text-decoration: none;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    gap: 6px;
}

.pagination-button:hover {
    background: rgba(255, 0, 102, 0.1);
    color: var(--primary-pink);
    border-color: var(--primary-pink);
    text-decoration: none;
}

.pagination-info {
    color: var(--text-muted);
    font-size: 14px;
    font-weight: 500;
}

/* Modal Styles */
.discord-modal {
    background: var(--secondary-bg);
    border: 1px solid var(--primary-pink);
    border-radius: 8px;
    box-shadow: 0 8px 16px var(--glow-pink);
}

.discord-modal-header {
    background: var(--accent-bg);
    border-bottom: 1px solid var(--border-color);
    padding: 16px 20px;
    border-radius: 8px 8px 0 0;
}

.discord-modal-header .modal-title {
    color: var(--text-primary);
    font-size: 20px;
    font-weight: 600;
    margin: 0;
}

.discord-close {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    font-size: 18px;
    padding: 4px;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.1s ease;
}

.discord-close:hover {
    background: var(--primary-pink);
    color: white;
}

.discord-modal-body {
    background: var(--secondary-bg);
    color: var(--text-primary);
    padding: 20px;
}

.discord-modal-footer {
    background: var(--accent-bg);
    border-top: 1px solid var(--border-color);
    padding: 16px 20px;
    border-radius: 0 0 8px 8px;
    display: flex;
    justify-content: flex-end;
    gap: 8px;
}

/* Responsive - kleinere Abstände auf Mobile */
@media (max-width: 768px) {
    .search-form-grid {
        grid-template-columns: 1fr;
        gap: 12px;
    }
    
    .search-buttons-wrapper {
        justify-content: stretch;
    }
    
    .discord-button {
        flex: 1;
        justify-content: center;
    }
    
    .discord-chat-header {
        flex-direction: column;
        gap: 12px;
        align-items: flex-start;
    }
    
    .chat-controls {
        width: 100%;
        justify-content: space-between;
    }
    
    .discord-message {
        padding: 0.125rem 0.75rem 0.125rem 4rem;
    }
    
    .message-avatar-wrapper {
        left: 0.75rem;
        width: 2rem;
        height: 2rem;
    }
    
    .discord-avatar {
        width: 2rem;
        height: 2rem;
    }
    
    .system-avatar {
        font-size: 0.875rem;
    }
    
    .discord-message-actions {
        position: relative;
        top: auto;
        right: auto;
        margin-top: 0.25rem;
        opacity: 1;
        pointer-events: auto;
    }
    
    .message-actions-inner {
        width: 100%;
        justify-content: space-around;
        background: rgba(255, 0, 102, 0.1);
    }
    
    .action-button {
        flex: 1;
        margin: 0 0.125rem;
    }
    
    .compact .discord-message {
        padding: 0.125rem 0.75rem 0.125rem 3rem;
    }
    
    .compact .message-avatar-wrapper {
        left: 0.75rem;
        width: 1rem;
        height: 1rem;
    }
    
    .compact .discord-avatar {
        width: 20px;
        height: 20px;
    }
    
    .pagination-inner {
        flex-direction: column;
        gap: 12px;
    }
    
    .message-header-line {
        flex-wrap: wrap;
        gap: 4px;
    }
    
    .channel-badge {
        margin-left: 0;
        margin-top: 4px;
    }
}

@media (max-width: 480px) {
    .discord-search-container,
    .discord-chat-header,
    .discord-pagination {
        padding: 12px 16px;
    }
    
    .discord-message {
        padding: 0.125rem 8px 0.125rem 52px;
    }
    
    .message-avatar-wrapper {
        left: 8px;
        width: 28px;
        height: 28px;
    }
    
    .discord-avatar {
        width: 28px;
        height: 28px;
    }
    
    .message-content-text {
        font-size: 15px;
        line-height: 20px;
    }
    
    .compact .message-content-text {
        font-size: 13px;
        line-height: 18px;
    }
    
    .discord-attachment {
        padding: 6px;
    }
    
    .attachment-inner {
        gap: 6px;
    }
    
    .attachment-icon {
        width: 28px;
        height: 28px;
        font-size: 14px;
    }
}

/* Custom Selection */
::selection {
    background: var(--glow-pink);
    color: var(--text-primary);
}

::-moz-selection {
    background: var(--glow-pink);
    color: var(--text-primary);
}

/* Focus Styles */
.discord-input:focus,
.discord-select:focus,
.action-button:focus,
.pagination-button:focus,
.discord-button:focus {
    outline: 2px solid var(--primary-pink);
    outline-offset: 2px;
}

/* Loading States */
.loading-message {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 40px;
    color: var(--text-muted);
    font-size: 16px;
}

.loading-spinner {
    margin-right: 12px;
    font-size: 18px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}
</style>

<script>
// View Toggle Functionality
document.addEventListener('DOMContentLoaded', function() {
    const viewRadios = document.querySelectorAll('input[name="msgView"]');
    const messagesContainer = document.getElementById('messagesContainer');
    
    viewRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.id === 'compact') {
                messagesContainer.classList.add('compact');
            } else {
                messagesContainer.classList.remove('compact');
            }
            
            // Speichere Präferenz
            localStorage.setItem('messageView', this.id);
        });
    });
    
    // Lade gespeicherte Ansicht
    const savedView = localStorage.getItem('messageView');
    if (savedView) {
        const savedRadio = document.getElementById(savedView);
        if (savedRadio) {
            savedRadio.checked = true;
            if (savedView === 'compact') {
                messagesContainer.classList.add('compact');
            }
        }
    }
});

// Message Actions
function showMessageDetails(messageId) {
    const content = `
        <div class="row">
            <div class="col-md-6">
                <h6 style="color: var(--discord-header-primary); margin-bottom: 12px;">
                    <i class="fas fa-info-circle"></i> Nachrichten-Information
                </h6>
                <div style="background: var(--discord-bg-secondary); padding: 12px; border-radius: 6px; margin-bottom: 12px;">
                    <div style="color: var(--discord-text-muted); font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">Message ID</div>
                    <code style="color: var(--discord-text-normal); background: var(--discord-bg-tertiary); padding: 2px 4px; border-radius: 3px;">${messageId}</code>
                </div>
                <div style="background: var(--discord-bg-secondary); padding: 12px; border-radius: 6px;">
                    <div style="color: var(--discord-text-muted); font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">Typ</div>
                    <div style="color: var(--discord-text-normal);">Reguläre Nachricht</div>
                </div>
            </div>
            <div class="col-md-6">
                <h6 style="color: var(--discord-header-primary); margin-bottom: 12px;">
                    <i class="fas fa-cog"></i> Metadaten
                </h6>
                <div style="background: var(--discord-bg-secondary); padding: 12px; border-radius: 6px; margin-bottom: 12px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                        <span style="color: var(--discord-text-muted);">Bearbeitet:</span>
                        <span style="color: var(--discord-text-normal);">Nein</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span style="color: var(--discord-text-muted);">Gelöscht:</span>
                        <span style="color: var(--discord-text-normal);">Nein</span>
                    </div>
                </div>
                <div style="background: var(--discord-bg-secondary); padding: 12px; border-radius: 6px;">
                    <div style="color: var(--discord-text-muted); font-size: 12px; text-transform: uppercase; margin-bottom: 4px;">Aktionen verfügbar</div>
                    <div style="color: var(--discord-text-normal); font-size: 14px;">
                        <i class="fas fa-check" style="color: var(--discord-positive); margin-right: 4px;"></i> Details anzeigen<br>
                        <i class="fas fa-check" style="color: var(--discord-positive); margin-right: 4px;"></i> In Discord öffnen<br>
                        <i class="fas fa-check" style="color: var(--discord-positive); margin-right: 4px;"></i> Nachricht kopieren
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.getElementById('messageDetailsContent').innerHTML = content;
    new bootstrap.Modal(document.getElementById('messageDetailsModal')).show();
}

function jumpToMessage(messageId, channelId) {
    // Discord Deep Link
    const guildId = '<%= typeof CONFIG !== "undefined" ? CONFIG.GUILD_ID : "1406183789964562432" %>';
    const discordUrl = `https://discord.com/channels/${guildId}/${channelId}/${messageId}`;
    window.open(discordUrl, '_blank');
    
    // Toast Notification
    showToast('Discord wird geöffnet...', 'info');
}

function copyMessage(content) {
    if (!content || content === '[Nachricht ohne Inhalt]') {
        showToast('Keine Nachricht zum Kopieren vorhanden', 'warning');
        return;
    }
    
    copyToClipboard(content);
}

function copyToClipboard(text) {
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(text).then(() => {
            showToast('In Zwischenablage kopiert!', 'success');
        }).catch(() => {
            fallbackCopyTextToClipboard(text);
        });
    } else {
        fallbackCopyTextToClipboard(text);
    }
}

function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            showToast('In Zwischenablage kopiert!', 'success');
        } else {
            showToast('Kopieren fehlgeschlagen', 'error');
        }
    } catch (err) {
        showToast('Kopieren fehlgeschlagen', 'error');
    }
    
    document.body.removeChild(textArea);
}

// Export Messages
function exportMessages() {
    const messages = document.querySelectorAll('.discord-message');
    let csv = 'Zeitstempel,Benutzer,Channel,Nachricht,Status,Message ID\n';
    
    messages.forEach(msg => {
        const messageData = extractMessageData(msg);
        if (messageData) {
            const escapedContent = (messageData.content || '').replace(/"/g, '""');
            csv += `"${messageData.timestamp}","${messageData.author}","${messageData.channel}","${escapedContent}","${messageData.status}","${messageData.messageId}"\n`;
        }
    });
    
    // Download CSV
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `14th_squad_messages_${new Date().toISOString().slice(0,10)}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showToast('Nachrichten exportiert!', 'success');
}

function extractMessageData(messageElement) {
    const timestampEl = messageElement.querySelector('.message-timestamp-full');
    const authorEl = messageElement.querySelector('.message-author');
    const contentEl = messageElement.querySelector('.message-content-text');
    const channelEl = messageElement.querySelector('.channel-badge');
    
    if (!timestampEl || !authorEl || !contentEl) return null;
    
    const isDeleted = messageElement.classList.contains('message-deleted');
    const isEdited = messageElement.classList.contains('message-edited');
    const messageId = messageElement.getAttribute('data-message-id') || 'unknown';
    
    let status = 'Normal';
    if (isDeleted) status = 'Gelöscht';
    else if (isEdited) status = 'Bearbeitet';
    
    return {
        timestamp: timestampEl.textContent.trim(),
        author: authorEl.textContent.trim(),
        channel: channelEl ? channelEl.textContent.trim().replace('#', '') : 'Unknown',
        content: contentEl.textContent.trim(),
        status: status,
        messageId: messageId
    };
}

// Toast Notifications
function showToast(message, type = 'info') {
    const toastContainer = getOrCreateToastContainer();
    const toastId = 'toast-' + Date.now();
    
    const icons = {
        'success': 'fas fa-check-circle',
        'error': 'fas fa-exclamation-circle',
        'warning': 'fas fa-exclamation-triangle',
        'info': 'fas fa-info-circle'
    };
    
    const colors = {
        'success': 'var(--discord-positive)',
        'error': 'var(--discord-danger)',
        'warning': 'var(--discord-warning)',
        'info': 'var(--discord-brand)'
    };
    
    const toastHtml = `
        <div id="${toastId}" class="discord-toast" style="background: var(--discord-bg-floating); border: 1px solid var(--discord-bg-modifier-active); color: var(--discord-text-normal);">
            <div style="display: flex; align-items: center; padding: 12px 16px;">
                <i class="${icons[type]}" style="color: ${colors[type]}; margin-right: 8px; font-size: 16px;"></i>
                <span style="flex: 1;">${message}</span>
                <button onclick="removeToast('${toastId}')" style="background: none; border: none; color: var(--discord-interactive-normal); cursor: pointer; margin-left: 8px; padding: 4px;">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHtml);
    
    // Auto-remove nach 4 Sekunden
    setTimeout(() => {
        removeToast(toastId);
    }, 4000);
}

function removeToast(toastId) {
    const toast = document.getElementById(toastId);
    if (toast) {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }
}

function getOrCreateToastContainer() {
    let container = document.getElementById('toast-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'toast-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            display: flex;
            flex-direction: column;
            gap: 8px;
            max-width: 400px;
        `;
        document.body.appendChild(container);
    }
    return container;
}

// Real-time search
let searchTimeout;
document.getElementById('search').addEventListener('input', function() {
    clearTimeout(searchTimeout);
    const query = this.value;
    
    if (query.length >= 2) {
        searchTimeout = setTimeout(() => {
            // Highlight existing messages
            highlightSearchTerms(query);
        }, 300);
    } else {
        // Remove highlights
        removeAllHighlights();
    }
});

function highlightSearchTerms(searchTerm) {
    const messages = document.querySelectorAll('.message-content-text');
    const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    
    messages.forEach(msg => {
        const originalText = msg.textContent;
        if (originalText.toLowerCase().includes(searchTerm.toLowerCase())) {
            msg.innerHTML = originalText.replace(regex, '<mark class="discord-highlight">$1</mark>');
        }
    });
}

function removeAllHighlights() {
    const highlights = document.querySelectorAll('.discord-highlight');
    highlights.forEach(highlight => {
        const parent = highlight.parentNode;
        parent.replaceChild(document.createTextNode(highlight.textContent), highlight);
        parent.normalize();
    });
}

// Scroll to bottom functionality
function scrollToBottom() {
    const container = document.getElementById('messagesContainer');
    container.scrollTop = container.scrollHeight;
}

// Auto-scroll on new messages (falls implementiert)
const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Optional: Auto-scroll to new messages
            // scrollToBottom();
        }
    });
});

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    // Ctrl/Cmd + F für Suche
    if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
        e.preventDefault();
        document.getElementById('search').focus();
    }
    
    // Escape um Suche zu leeren
    if (e.key === 'Escape') {
        const searchInput = document.getElementById('search');
        if (searchInput.value) {
            searchInput.value = '';
            removeAllHighlights();
            // Optional: Reload page to clear search
            // window.location.href = '/messages';
        }
    }
    
    // Ctrl/Cmd + E für Export
    if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
        e.preventDefault();
        exportMessages();
    }
});

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    // Lade Message Count
    updateMessageCount();
    
    // Auto-refresh alle 30 Sekunden (optional)
    // setInterval(() => {
    //     if (!document.hidden) {
    //         location.reload();
    //     }
    // }, 30000);
});

function updateMessageCount() {
    const messages = document.querySelectorAll('.discord-message');
    const countElement = document.getElementById('visibleMessages');
    if (countElement) {
        countElement.textContent = messages.length;
    }
}

// Lazy loading für Avatar-Bilder
function setupLazyLoading() {
    const avatars = document.querySelectorAll('.user-avatar');
    
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src || img.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
            }
        });
    });
    
    avatars.forEach(img => {
        imageObserver.observe(img);
    });
}

// CSS für Toast Notifications
const toastStyles = `
.discord-toast {
    border-radius: 8px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.24);
    transition: all 0.3s ease;
    transform: translateX(0);
    opacity: 1;
    animation: slideInRight 0.3s ease;
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}
`;

// Füge Toast Styles zum Head hinzu
const styleSheet = document.createElement('style');
styleSheet.textContent = toastStyles;
document.head.appendChild(styleSheet);
</script>